import sys
import pymongo
import urllib.parse

## normally in config or secrets modules:

mongo_host = '127.0.0.1'
mongo_port = '27017'
mongo_user = 'test_user'
mongo_passwd = 'resu_tset'
mongo_user_db = 'test_db'           ## the authentication database for mongo_user
database = 'test_db'                ## the database where we will write records
collection = 'test_collection'      ## the collection where we will write records

## test data:

docs = [{"artist": "Led Zeppelin",
         "genre": "classic rock",
         "studio_album_count": 9,
         "i like": True},
        {"artist": "William Shatner",
         "genre": "tone deaf lounge lizard",
         "studio_album_count": 8,
         "i like": False,
         "other works": ["star trek", "boston legal"]},
        {"artist": "Ngozi Family",
         "genre": "pychedelic rock",
         "studio_album_count": 2,
         "i like": True,
         "info": {"origin": "Zambia", "lead singer": "Paul Ngozi"}}]

## Set up client:
##   normally you can set up the client in one spot and pass around;
##   alternatively, you can combine several steps in a single try;
##   several exception types can be thrown, and you can separate out handling
##     of each type, but usually generic exception handling like below is ok:
try: 
    user = urllib.parse.quote_plus(mongo_user)       ## percent-escape string
    passwd = urllib.parse.quote_plus(mongo_passwd)   ## percent-escape string
    uri = f"mongodb://{user}:{passwd}@{mongo_host}:{mongo_port}" 
    client = pymongo.MongoClient(uri, authSource=mongo_user_db)
    client.admin.command('ismaster')      ## tests for client != None and good connection
except Exception as e: 
    sys.stderr.write(f"ERROR: could not connect to '{mongo_host}:{mongo_port}': {e}\n")
    sys.exit(3)

## Connect to database and collection:
##   normally you can set up the collection object in one spot and pass around:
try:
    db = client[database]
    col = db[collection]
except Exception as e:
    sys.stderr.write(f"ERROR: could not select collection '{database}.{collection}': {e}\n")
    sys.exit(4)

## The actual insertion; you can also insert a single record as a dictionary (instead
##   of as a list of dictionaries), by calling 'insert_one', then get single _id w/
##   result.inserted_id (instead of inserted_ids):
try: 
    result = col.insert_many(docs)
    if not result.acknowledged:
        raise Exception(f"ERROR: insertion not acknowledged.")
except Exception as e:
    sys.stderr.write(f"ERROR: could not write records to '{database}.{collection}': {e}\n")
    sys.exit(5)

print(f"successfully inserted data; autogenerated _ids: '{result.inserted_ids}'\n")
sys.exit(0)

